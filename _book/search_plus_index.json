{"./":{"url":"./","title":"首页","keywords":"","body":"首页 这是一本OpenMV的中文教程，内容在持续更新中... "},"1-基础教程/introduction.html":{"url":"1-基础教程/introduction.html","title":"OpenMV简介","keywords":"","body":"OpenMV简介 OpenMV是一个低成本，可扩展的，基于Python的机器视觉模块，旨在成为“ 机器视觉的Arduino ”。 你可以通过高级语言Python脚本（准确的说是 MicroPython ），而不是C/C++语言，很轻松的完成机器视觉（Machine Vision）应用。 Python的高级数据结构使你很容易在机器视觉算法中处理复杂的输出。而且你仍然可以完全控制OpenMV，包括IO引脚。 你可以很容易的使用外部中断触发拍摄或者执行算法，也可以用算法的结果用来控制IO引脚。 "},"1-基础教程/quickstart.html":{"url":"1-基础教程/quickstart.html","title":"OpenMV快速上手教程","keywords":"","body":"OpenMV快速上手教程 驱动的下载和安装 Windows驱动安装 将OpenMV Cam插到电脑上，正常情况Win10系统会自动安装驱动，不需要手动安装，这时在设备管理器中会看到串口： "},"2-官方例程/HelloWorld.html":{"url":"2-官方例程/HelloWorld.html","title":"HelloWorld例程详解","keywords":"","body":"HelloWorld例程详解 01Basic——helloworld.py例程详细中文注释如下， # Hello World Example # # Welcome to the OpenMV IDE! Click on the gear button above to run the script! import sensor, image, time #导入依赖的模块，sensor感光元件参数设置模块，image图像处理模块，time计时模块。 sensor.reset() #复位和初始化感光元件 sensor.set_pixformat(sensor.RGB565) #设置图像输出格式，OV7725可以设置成RGB565或者GRAYSCALE，MT9V034只能设置成GRAYSCALE sensor.set_framesize(sensor.QVGA) #设置图像像素大小， #sensor.QQVGA: 160x120，sensor.QQVGA2: 128x160 (用于LCD扩展板)，sensor.QVGA: 320x240， #sensor.VGA: 640x480, sensor.QQCIF: 88x72，sensor.QCIF: 176x144，sensor.CIF: 352x288 sensor.skip_frames(time = 2000) #跳过前2000ms的图像，等待感光元件变稳定再读取图像的数据 clock = time.clock() #初始化时钟 while(True): #while循环 clock.tick() #开始计时 img = sensor.snapshot() #拍摄一张照片，返回一个Image对象，赋值给img变量。 print(clock.fps()) #停止计时，返回当前的帧率，并打印当前的帧率。 "}}